# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `Coll.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Vocal
_M_Vocal = Ice.openModule('Vocal')
__name__ = 'Vocal'

if 'Track' not in _M_Vocal.__dict__:
    _M_Vocal.Track = Ice.createTempClass()
    class Track(object):
        def __init__(self, author='', title='', filePath='', duration=0):
            self.author = author
            self.title = title
            self.filePath = filePath
            self.duration = duration

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.author)
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.filePath)
            _h = 5 * _h + Ice.getHash(self.duration)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Vocal.Track):
                return NotImplemented
            else:
                if self.author is None or other.author is None:
                    if self.author != other.author:
                        return (-1 if self.author is None else 1)
                else:
                    if self.author < other.author:
                        return -1
                    elif self.author > other.author:
                        return 1
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.filePath is None or other.filePath is None:
                    if self.filePath != other.filePath:
                        return (-1 if self.filePath is None else 1)
                else:
                    if self.filePath < other.filePath:
                        return -1
                    elif self.filePath > other.filePath:
                        return 1
                if self.duration is None or other.duration is None:
                    if self.duration != other.duration:
                        return (-1 if self.duration is None else 1)
                else:
                    if self.duration < other.duration:
                        return -1
                    elif self.duration > other.duration:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Vocal._t_Track)

        __repr__ = __str__

    _M_Vocal._t_Track = IcePy.defineStruct('::Vocal::Track', Track, (), (
        ('author', (), IcePy._t_string),
        ('title', (), IcePy._t_string),
        ('filePath', (), IcePy._t_string),
        ('duration', (), IcePy._t_int)
    ))

    _M_Vocal.Track = Track
    del Track

if '_t_Collection' not in _M_Vocal.__dict__:
    _M_Vocal._t_Collection = IcePy.defineSequence('::Vocal::Collection', (), _M_Vocal._t_Track)

if 'Coll' not in _M_Vocal.__dict__:
    _M_Vocal.Coll = Ice.createTempClass()
    class Coll(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vocal.Coll:
                raise RuntimeError('Vocal.Coll is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vocal::Coll')

        def ice_id(self, current=None):
            return '::Vocal::Coll'

        def ice_staticId():
            return '::Vocal::Coll'
        ice_staticId = staticmethod(ice_staticId)

        def add(self, t, current=None):
            pass

        def search(self, t, current=None):
            pass

        def streamTrack(self, t, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vocal._t_Coll)

        __repr__ = __str__

    _M_Vocal.CollPrx = Ice.createTempClass()
    class CollPrx(Ice.ObjectPrx):

        def add(self, t, _ctx=None):
            return _M_Vocal.Coll._op_add.invoke(self, ((t, ), _ctx))

        def begin_add(self, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vocal.Coll._op_add.begin(self, ((t, ), _response, _ex, _sent, _ctx))

        def end_add(self, _r):
            return _M_Vocal.Coll._op_add.end(self, _r)

        def search(self, t, _ctx=None):
            return _M_Vocal.Coll._op_search.invoke(self, ((t, ), _ctx))

        def begin_search(self, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vocal.Coll._op_search.begin(self, ((t, ), _response, _ex, _sent, _ctx))

        def end_search(self, _r):
            return _M_Vocal.Coll._op_search.end(self, _r)

        def streamTrack(self, t, _ctx=None):
            return _M_Vocal.Coll._op_streamTrack.invoke(self, ((t, ), _ctx))

        def begin_streamTrack(self, t, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vocal.Coll._op_streamTrack.begin(self, ((t, ), _response, _ex, _sent, _ctx))

        def end_streamTrack(self, _r):
            return _M_Vocal.Coll._op_streamTrack.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vocal.CollPrx.ice_checkedCast(proxy, '::Vocal::Coll', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vocal.CollPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Vocal._t_CollPrx = IcePy.defineProxy('::Vocal::Coll', CollPrx)

    _M_Vocal._t_Coll = IcePy.defineClass('::Vocal::Coll', Coll, -1, (), True, False, None, (), ())
    Coll._ice_type = _M_Vocal._t_Coll

    Coll._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vocal._t_Track, False, 0),), (), None, ())
    Coll._op_search = IcePy.Operation('search', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vocal._t_Track, False, 0),), (), ((), _M_Vocal._t_Collection, False, 0), ())
    Coll._op_streamTrack = IcePy.Operation('streamTrack', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vocal._t_Track, False, 0),), (), ((), _M_Vocal._t_Track, False, 0), ())

    _M_Vocal.Coll = Coll
    del Coll

    _M_Vocal.CollPrx = CollPrx
    del CollPrx

# End of module Vocal
